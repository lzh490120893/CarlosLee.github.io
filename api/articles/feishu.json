{"title":"飞书小组件开发总结","uid":"2e99a752c54d149ce68a60b00d3f322d","slug":"feishu","date":"2023-12-18T06:00:00.000Z","updated":"2023-12-21T08:57:30.190Z","comments":true,"path":"api/articles/feishu.json","keywords":null,"cover":null,"content":"<h2 id=\"开发文档\"><a href=\"#开发文档\" class=\"headerlink\" title=\"开发文档\"></a>开发文档</h2><h3 id=\"1-快速上手准备开发\"><a href=\"#1-快速上手准备开发\" class=\"headerlink\" title=\"1. 快速上手准备开发\"></a>1. 快速上手准备开发</h3><p><a href=\"https://open.feishu.cn/document/client-docs/block/hosting-scenario-introduction/workplace\">工作台小组件概述 - 开发指南 - 开发文档 - 飞书开放平台</a></p>\n<ul>\n<li>这个文档是开始准备开发需要看的，包括了开发前的一些准备工作，比如前期在开发者后台的配置，开发工具的下载。也提供了工作台小组件的框架生命周期，代码构成，基础能力等等，这部分开始了解即可，不用深究，写代码的时候再细看。</li>\n<li>开发者后台配置文档有部分不清楚，在此补充说明<br>前提是应用和工作台小组件已经新建后<ul>\n<li>新建应用 App Id 在这里展示</li>\n<li>工作台小组件 Block Id 在这里展示</li>\n<li>为保证开发时开发人员能及时看到效果，避免出现加载超时问题，需要在这里至少添加为测试人员</li>\n</ul>\n</li>\n<li>开发者工具一定下载新版本，新版本比老版本好用很多</li>\n</ul>\n<h3 id=\"2-代码开发文档\"><a href=\"#2-代码开发文档\" class=\"headerlink\" title=\"2. 代码开发文档\"></a>2. 代码开发文档</h3><p>a. <a href=\"https://open.feishu.cn/document/client-docs/block/block-frame/config\">配置参考 - 开发指南 - 开发文档 - 飞书开放平台</a></p>\n<p>b. <a href=\"https://open.feishu.cn/document/client-docs/block/component/basic-components\">基础组件 - 客户端 API - 开发文档 - 飞书开放平台</a></p>\n<p>   以上两个文档都需要开发时候查看。</p>\n<ul>\n<li>第一个文档内容以及其下方内容包括了配置，代码构成，框架介绍，基本功能，前三个需要详细了解，其中代码构成和框架介绍下一大章具体介绍。</li>\n<li>第二个文档即之后内容介绍了开发可用的组件，封装好可以使用的 API，根据具体需求使用。</li>\n<li>有很多的组件和API，小组件和小程序是通用的（比如我开发中遇到的 login，canvas），但是在工作台开发文档里它并没有说明这一点（很不好的地方）。所以建议想要得到什么功能工作台文档没有找到就去小程序找找看看是否支持小组件，如果找不到提问飞书技术支持</li>\n</ul>\n<h2 id=\"整体框架\"><a href=\"#整体框架\" class=\"headerlink\" title=\"整体框架\"></a>整体框架</h2><p>⻜书⼯作台开发使⽤的是其⾃研的框架，所以不⽀持很多库的导⼊。</p>\n<p>其框架可参考开发⽂档这⼀章节提供的⽂档，以下谈我⾃⼰理解。</p>\n<h3 id=\"1-代码结构\"><a href=\"#1-代码结构\" class=\"headerlink\" title=\"1. 代码结构\"></a>1. 代码结构</h3><p>代码结构分为视图层，逻辑层。</p>\n<p>视图层对应的语⾔为 TTML, TTSS (分别对应我们熟知的 HTML 和 CSS)，其中TTML⽀持了像列表渲染，条件渲染，数据绑定等这样的功能（写法⼗分类似于 Vue）。TTSS 则基本和 CSS ⼗分相近，采⽤ CSS ⽀持的写法（注意不⽀持 less 写法，所以嵌套写法是⾏不通的）。</p>\n<p>逻辑层⽤的就是 JS，⻜书⼯作台封装了 Block 和 Creator 。其中 Block 是⼩组件应⽤的数据载体，Creator 的主要功能是创建⼩组件应⽤的元信息（SourceMeta）和源数据（SourceData）传递给Block.Creator我没有使⽤暂时不做介绍，对于 Block，其结构设计和⽣命周期设计也是类似于 Vue框架的，展⽰如下。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">TypeScript</span></span><br><span class=\"line\"><span class=\"title class_\">Block</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">point</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">onLoad</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(options.<span class=\"property\">host</span>, options.<span class=\"property\">blockInfo</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">onShow</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 视图可见时执行</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">onHide</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 视图隐藏时执行</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">onReady</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 视图渲染完成时执行</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">onDestroy</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Block销毁时执行</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">onResourceChange</span>(<span class=\"params\">sourceData</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 有协同数据更新时执行，业务可以获取到相关数据信息进行一定的逻辑操作</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">onActivate</span>(<span class=\"params\">activeState</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// block 激活时执行</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(activeState);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">onInactivate</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// block 失活时执行</span></span><br><span class=\"line\">    tt.<span class=\"title function_\">saveState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">state</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">onTap</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// invoked when user do some action</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"组件使用\"><a href=\"#组件使用\" class=\"headerlink\" title=\"组件使用\"></a>组件使用</h2><p>这⾥我再贴⼀下组件的⽂档<a href=\"https://open.feishu.cn/document/client-docs/block/component/basic-components\">基础组件 - 客⼾端 API - 开发⽂档 - ⻜书开放平台</a>。我这次开发主要⽤到的除了基础组件外就是图标组件，⽬前图表⻜书⼯作台⼩组件开发只⽀持使⽤ChartSpace组件（组件⽂档中打开图表开发⽂档）</p>\n<h3 id=\"1-图表绘制\"><a href=\"#1-图表绘制\" class=\"headerlink\" title=\"1. 图表绘制\"></a>1. 图表绘制</h3><p>在⻜书⼯作台中需要使⽤ canvas 来绘制图表，canvas 绘制代码⽐较繁琐，⽂档中给出了⼀个图表⽰例，该⽰例⾥有封装好的 canvas 绘制，可以直接使⽤。<a href=\"https://open.feishu.cn/document/client-docs/block/component/extend/chartspace-component\">ChartSpace 图表组件 - 客⼾端 API - 开发⽂档 - ⻜书开放平台</a></p>\n<p>注意到飞书最近可能收到比较多不好用的反馈，升级了 VChart，可见文档<a href=\"https://open.feishu.cn/document/uAjLw4CM/uYjL24iN/block/component/extend/vchart-component\">VChart 使用</a></p>\n<h3 id=\"2-image\"><a href=\"#2-image\" class=\"headerlink\" title=\"2. image\"></a>2. image</h3><p>image 不⽀持使⽤本地图⽚，只能使⽤⽹络图⽚或者符合 data:URL 协议的图⽚。</p>\n<h3 id=\"3-父子组件\"><a href=\"#3-父子组件\" class=\"headerlink\" title=\"3. 父子组件\"></a>3. 父子组件</h3><p>对应文档中的 template 和 import 组件，详见文档。但是目前子组件只能使用父组件传来的方法和数据进行展示，自己无法处理任何数据逻辑，必须是父组件处理好的。子组件无法给父组件传任何东西。</p>\n<h2 id=\"客户端封装-API\"><a href=\"#客户端封装-API\" class=\"headerlink\" title=\"客户端封装 API\"></a>客户端封装 API</h2><p>客户端封装了比较多的API供开发者使用，这里附上使用链接API<a href=\"https://open.feishu.cn/document/client-docs/block/api/api-introduction\">简介 - 客户端 API - 开发文档 - 飞书开放平台</a>。这一块文档描述很详细，没有什么问题，就是需要注意某些API小组件和小程序通用，但小组件中没有明确哪些共用，需要确认一下。</p>\n<p>其中关于发送网络请求中有一种封装好的promise版本下文介绍。</p>\n<h2 id=\"发送请求\"><a href=\"#发送请求\" class=\"headerlink\" title=\"发送请求\"></a>发送请求</h2><p>由于官方没有对 request 进行 promise 的封装，下面列出一种封装方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用于 API Promise 化</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">promisify</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (tt.<span class=\"property\">promises</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  tt.<span class=\"property\">promises</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(tt, &#123;</span><br><span class=\"line\">    <span class=\"title function_\">get</span>(<span class=\"params\">obj, api</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> fn = obj[api];</span><br><span class=\"line\">      <span class=\"keyword\">const</span> isFunction = <span class=\"keyword\">typeof</span> fn === <span class=\"string\">&#x27;function&#x27;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> isSyncFunction = api.<span class=\"title function_\">endsWith</span>(<span class=\"string\">&#x27;Sync&#x27;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> isEventFunction = api.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&#x27;on&#x27;</span>) || api.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&#x27;off&#x27;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> isCreateFunction = api.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&#x27;create&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isFunction || isSyncFunction || isEventFunction || isCreateFunction) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br></pre></td></tr></table></figure>\n\n<p>这样在代码初始执行引入的 promisify 方法就可实现 promise 的封装。</p>\n<ul>\n<li>request 请求坑点</li>\n</ul>\n<p>不支持 cookie，无法获取后端设置 cookie，也无法自行设置请求头的 cookie。<strong>（很重要，开发前一定要注意这点）</strong></p>\n<h2 id=\"移动端适配\"><a href=\"#移动端适配\" class=\"headerlink\" title=\"移动端适配\"></a>移动端适配</h2><ol>\n<li><p><strong>TTSS 移动端问题</strong></p>\n<ul>\n<li>不支持 rem 适配（因为无法设置最外层 HTML 的 font-size）</li>\n<li>不支持任何视口单位</li>\n<li>不支持标签选择器</li>\n<li>不支持组选择器（比如这个代码）</li>\n</ul>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.a</span>, <span class=\"selector-class\">.b</span> &#123; <span class=\"attribute\">color</span>: red &#125; // 只有<span class=\"selector-tag\">b</span>类<span class=\"selector-tag\">html</span>元素受影响，<span class=\"selector-tag\">a</span>类不受影响</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>display 不去指定会默认为 display：auto（飞书自己定的一种写法），不设置宽高的话内容会被压缩没，所有内容默认一行内排列，有点类似 inline</li>\n<li>所有的元素都会默认加一个 border，会导致开发调试界面和最终结果界面不一致</li>\n<li>所有盒子默认是怪异盒模型</li>\n</ul>\n</li>\n<li><p><strong>JS 移动端遇到的问题</strong></p>\n<ul>\n<li>在第一次加载页面时，import 的数据无法得到，刷新一次就可以拿到（不是浏览器支持问题，具体原因尚不清楚）</li>\n</ul>\n</li>\n</ol>\n","feature":true,"text":"开发文档1. 快速上手准备开发工作台小组件概述 - 开发指南 - 开发文档 - 飞书开放平台 这个文档是开始准备开发需要看的，包括了开发前的一些准备工作，比如前...","permalink":"/post/feishu","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"前端技术","slug":"前端技术","count":3,"path":"api/categories/前端技术.json"}],"tags":[{"name":"飞书平台","slug":"飞书平台","count":1,"path":"api/tags/飞书平台.json"},{"name":"工作台小组件","slug":"工作台小组件","count":1,"path":"api/tags/工作台小组件.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3\"><span class=\"toc-text\">开发文档</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E5%87%86%E5%A4%87%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">1. 快速上手准备开发</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3\"><span class=\"toc-text\">2. 代码开发文档</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B4%E4%BD%93%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">整体框架</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">1. 代码结构</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">组件使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%9B%BE%E8%A1%A8%E7%BB%98%E5%88%B6\"><span class=\"toc-text\">1. 图表绘制</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-image\"><span class=\"toc-text\">2. image</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">3. 父子组件</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B0%81%E8%A3%85-API\"><span class=\"toc-text\">客户端封装 API</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">发送请求</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D\"><span class=\"toc-text\">移动端适配</span></a></li></ol>","author":{"name":"Carlos Lee","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"构建管理 menorepo","uid":"848e7f65f11be9c581f104a5e89cadaa","slug":"menorepo","date":"2023-12-10T04:00:00.000Z","updated":"2023-12-20T10:37:40.973Z","comments":true,"path":"api/articles/menorepo.json","keywords":null,"cover":null,"text":"使用 pnpm 管理 workspace 下载 pnpm, 安装 father-build 12npm install -g pnpmpnpm i -D fat...","permalink":"/post/menorepo","photos":[],"count_time":{"symbolsCount":505,"symbolsTime":"1 mins."},"categories":[{"name":"前端技术","slug":"前端技术","count":3,"path":"api/categories/前端技术.json"}],"tags":[{"name":"pnpm","slug":"pnpm","count":1,"path":"api/tags/pnpm.json"},{"name":"menorepo","slug":"menorepo","count":1,"path":"api/tags/menorepo.json"},{"name":"changesets","slug":"changesets","count":1,"path":"api/tags/changesets.json"}],"author":{"name":"Carlos Lee","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}