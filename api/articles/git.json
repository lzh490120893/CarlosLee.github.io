{"title":"Git 常用指令","uid":"cefb58a49db29b921cfdff3db3cce51b","slug":"git","date":"2023-07-21T06:00:00.000Z","updated":"2023-12-21T10:10:33.794Z","comments":true,"path":"api/articles/git.json","keywords":null,"cover":null,"content":"<h2 id=\"本地操作\"><a href=\"#本地操作\" class=\"headerlink\" title=\"本地操作\"></a>本地操作</h2><h3 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h3><h4 id=\"git-add-—–⼯作区提交到暂存区\"><a href=\"#git-add-—–⼯作区提交到暂存区\" class=\"headerlink\" title=\"git add —–⼯作区提交到暂存区\"></a>git add —–⼯作区提交到暂存区</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 git add .               将所有修改⽂件都提交到暂存区</span><br><span class=\"line\">2 git add ./a.js ./b.js   将修改的⽂件中的指定的⽂件</span><br><span class=\"line\">3 git add ./js            将js⽂件夹下修改的内容提交到暂存区</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"git-commit-—–⼯作区内容提交到本地仓库\"><a href=\"#git-commit-—–⼯作区内容提交到本地仓库\" class=\"headerlink\" title=\"git commit —–⼯作区内容提交到本地仓库\"></a>git commit —–⼯作区内容提交到本地仓库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 git commit -m <span class=\"string\">&quot;your commit message&quot;</span>   将⼯作区内容提交到本地仓库,并添加提交信息</span><br><span class=\"line\">2 git commit -m <span class=\"string\">&quot;new message&quot;</span> --amend   将⼯作区内容提交到本地仓库并追加提交</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"git-push-—–将本地仓库的内容推送到远程仓库\"><a href=\"#git-push-—–将本地仓库的内容推送到远程仓库\" class=\"headerlink\" title=\"git push —–将本地仓库的内容推送到远程仓库\"></a>git push —–将本地仓库的内容推送到远程仓库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 git push                                将当前本地分⽀branch1内容推送到远程分⽀or</span><br><span class=\"line\">2 git push --set-upstream origin branch1  若当前本地分⽀branch1 没有对应的远程分⽀or</span><br><span class=\"line\">3 git push -f                             强制提交</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新建\"><a href=\"#新建\" class=\"headerlink\" title=\"新建\"></a>新建</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 git init  新建仓库</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"合并\"><a href=\"#合并\" class=\"headerlink\" title=\"合并\"></a>合并</h3><h4 id=\"git-merge-—–将其他分⽀合并到⽬前所在分⽀⾥边\"><a href=\"#git-merge-—–将其他分⽀合并到⽬前所在分⽀⾥边\" class=\"headerlink\" title=\"git merge —–将其他分⽀合并到⽬前所在分⽀⾥边\"></a>git merge —–将其他分⽀合并到⽬前所在分⽀⾥边</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 git merge &lt;某个分⽀名&gt;    将某个分⽀合并到当前分⽀</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"git-rebase-—–简洁commit记录，多次commit合并为⼀次\"><a href=\"#git-rebase-—–简洁commit记录，多次commit合并为⼀次\" class=\"headerlink\" title=\"git rebase —–简洁commit记录，多次commit合并为⼀次\"></a>git rebase —–简洁commit记录，多次commit合并为⼀次</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 git rebase -i   合并多次commit为⼀次，只能在⾃⼰的分⽀上操作</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"git-cherry-pick-—–合并指定的commit到当前分⽀\"><a href=\"#git-cherry-pick-—–合并指定的commit到当前分⽀\" class=\"headerlink\" title=\"git cherry-pick —–合并指定的commit到当前分⽀\"></a>git cherry-pick —–合并指定的commit到当前分⽀</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 git cherry-pick commit-sha1             将commit-sha1的变动和并到当前分⽀</span><br><span class=\"line\">2 git cherry-pick commit-sha1 commit-sha2 将多次commit变动合并到当前分⽀</span><br><span class=\"line\">3 git cherry-pick commit-sha1..comit-sah5 将commit-sha1到commit-sha5中间的所有的变动</span><br><span class=\"line\">4 git cherry-pick --<span class=\"built_in\">continue</span>              pick时解决冲突后继续pick</span><br><span class=\"line\">5 git cherry-pick --skip                  多次pick时跳过本次commit的pick进⼊下⼀个co</span><br><span class=\"line\">6 git cherry-pick --abort                 完全放弃pick 恢复pick之前的状态</span><br><span class=\"line\">7 git cherry-pick --quit                  未冲突的commit⾃动变更，冲突的不要，推出这次</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"回撤\"><a href=\"#回撤\" class=\"headerlink\" title=\"回撤\"></a>回撤</h3><h4 id=\"git-revert-—–取消某次commit的内容（取消某次commit更改的内容，但是不会取消commit的记录⽽是⽤新⼀次的commit进⾏覆盖）\"><a href=\"#git-revert-—–取消某次commit的内容（取消某次commit更改的内容，但是不会取消commit的记录⽽是⽤新⼀次的commit进⾏覆盖）\" class=\"headerlink\" title=\"git revert —–取消某次commit的内容（取消某次commit更改的内容，但是不会取消commit的记录⽽是⽤新⼀次的commit进⾏覆盖）\"></a>git revert —–取消某次commit的内容（取消某次commit更改的内容，但是不会取消commit的记录⽽是⽤新⼀次的commit进⾏覆盖）</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 git revert &lt;commit_sha&gt;     取消某次commit内容但是会保留commit的记录</span><br><span class=\"line\">2 git revert -m 1 &lt;merge_sha&gt; 取消某次merge</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"git-reset-—–回滚代码\"><a href=\"#git-reset-—–回滚代码\" class=\"headerlink\" title=\"git reset —–回滚代码\"></a>git reset —–回滚代码</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 git reset --mixed &lt;commit_sha&gt;  将本地仓库退回⼯作区（取消commit 和add操作，不改变⽂件</span><br><span class=\"line\">2 git reset --<span class=\"built_in\">sort</span> &lt;commit_sha&gt;   将某个版本的commit从本地仓库退回到缓存区（取消commit）</span><br><span class=\"line\">3 git reset --hard &lt;commit_sha&gt;   取消某次commit的记录（取消commit和add并且改变⽂件）</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"git-restore-—–撤销缓存（⽤于将改动从暂存区退回⼯作区）\"><a href=\"#git-restore-—–撤销缓存（⽤于将改动从暂存区退回⼯作区）\" class=\"headerlink\" title=\"git restore —–撤销缓存（⽤于将改动从暂存区退回⼯作区）\"></a>git restore —–撤销缓存（⽤于将改动从暂存区退回⼯作区）</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 git restore --staged a.js   将a.js⽂件取消缓存(取消add操作，不改变⽂件内容)</span><br><span class=\"line\">2 git restore --staged .      将所有⽂件取消缓存</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h3><h4 id=\"git-stash-—–缓存代码\"><a href=\"#git-stash-—–缓存代码\" class=\"headerlink\" title=\"git stash —–缓存代码\"></a>git stash —–缓存代码</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 git stash save <span class=\"string\">&quot;message&quot;</span>  缓存代码时添加备注，便于查找。强烈推荐</span><br><span class=\"line\">2 git stash list            查看缓存记录</span><br><span class=\"line\">3 git stash pop             取出上⼀次缓存的代码，并删除这次缓存</span><br><span class=\"line\">4 git stash pop stash@&#123;2&#125;   取出index为2的缓存，并删除这次缓存，index为对应的git stas</span><br><span class=\"line\">5 stash apply               取出上⼀次的缓存，但不删除这次缓存</span><br><span class=\"line\">6 git stash apply stash@&#123;2&#125; 取出index为2的缓存代码，但不删除缓存</span><br><span class=\"line\">7 git stash drop stash@&#123;n&#125;  清除某次的缓存</span><br><span class=\"line\">8 git stash clear           清除所有缓存</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h3><h4 id=\"git-diff-—–对⽐差异\"><a href=\"#git-diff-—–对⽐差异\" class=\"headerlink\" title=\"git diff —–对⽐差异\"></a>git diff —–对⽐差异</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 git diff                      当⼯作区有变动，暂存区⽆变动，对⽐⼯作区和本地仓库的差异；</span><br><span class=\"line\">2 git diff --cached             显⽰暂存区和本地仓库间的代码管理</span><br><span class=\"line\">3 git diff --staged             和上⼀条⼀样</span><br><span class=\"line\">4 git diff &lt;分⽀名1&gt; &lt;分⽀名2&gt;   显⽰两个分⽀之间的差异</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"git log\"></a>git log</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 git <span class=\"built_in\">log</span>                     显⽰commit⽇志</span><br><span class=\"line\">2 git <span class=\"built_in\">log</span> --oneline           以简要模式显⽰commit的⽇志</span><br><span class=\"line\">3 git <span class=\"built_in\">log</span> -n                  显⽰最近n次的commit⽇志</span><br><span class=\"line\">4 git <span class=\"built_in\">log</span> --graph --decorate  显⽰commit 及分⽀的图形化变更</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"git-status-——-查看⼯作区状态\"><a href=\"#git-status-——-查看⼯作区状态\" class=\"headerlink\" title=\"git status —— 查看⼯作区状态\"></a>git status —— 查看⼯作区状态</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 git status                查看当前⼯作区暂存区变动</span><br><span class=\"line\">2 git status -s             以概要形式查看⼯作区暂存区变动</span><br><span class=\"line\">3 git status --show-statsh  查询⼯作区是否有stash缓存</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"全局配置\"><a href=\"#全局配置\" class=\"headerlink\" title=\"全局配置\"></a>全局配置</h2><h3 id=\"配置⽤⼾信息\"><a href=\"#配置⽤⼾信息\" class=\"headerlink\" title=\"配置⽤⼾信息\"></a>配置⽤⼾信息</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 git config user.name <span class=\"string\">&quot;your name&quot;</span>      配置⽤⼾名</span><br><span class=\"line\">2 git config user.email <span class=\"string\">&quot;your email &quot;</span>   配置⽤⼾邮箱</span><br><span class=\"line\">3 git config --global --list            查看当前配置</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"远程\"><a href=\"#远程\" class=\"headerlink\" title=\"远程\"></a>远程</h2><h3 id=\"拉取\"><a href=\"#拉取\" class=\"headerlink\" title=\"拉取\"></a>拉取</h3><h4 id=\"git-fetch-—获取更新\"><a href=\"#git-fetch-—获取更新\" class=\"headerlink\" title=\"git fetch —获取更新\"></a>git fetch —获取更新</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 git fetch &lt;远程主机名&gt; &lt;分⽀名&gt;   获取远程特定分⽀的更新</span><br><span class=\"line\">2 git fetch --all                  获取远程仓库所有分⽀的更新</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"git-clone-—克隆仓库\"><a href=\"#git-clone-—克隆仓库\" class=\"headerlink\" title=\"git clone —克隆仓库\"></a>git clone —克隆仓库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 git <span class=\"built_in\">clone</span> &lt;git url &gt;              克隆远端仓库到本地</span><br><span class=\"line\">2 git <span class=\"built_in\">clone</span> &lt;git url &gt; -b branch1   克隆远端仓库到本地，并同时切换到指定分⽀ branch1</span><br><span class=\"line\">3 git <span class=\"built_in\">clone</span> &lt;git url &gt; my-project   克隆远端仓库到本地并指定本地仓库的⽂件夹名称为my-project</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"git-pull-—拉取远程仓库并合并\"><a href=\"#git-pull-—拉取远程仓库并合并\" class=\"headerlink\" title=\"git pull —拉取远程仓库并合并\"></a>git pull —拉取远程仓库并合并</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 git pull                       若拉取并合并的远程分⽀和当前本地分⽀⼀致</span><br><span class=\"line\">2 git pull &lt;远程主机名&gt; &lt;分⽀名&gt;  若拉取并合并的远程分⽀和当前本地分⽀名称不⼀致</span><br><span class=\"line\">3 git pull --rebase              使⽤rebase模式进⾏合并</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关联\"><a href=\"#关联\" class=\"headerlink\" title=\"关联\"></a>关联</h3><h4 id=\"git-remote\"><a href=\"#git-remote\" class=\"headerlink\" title=\"git remote\"></a>git remote</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 git remote add origin &lt;git url&gt;       关联本地git init到远程仓库</span><br><span class=\"line\">2 git remote add &lt;git url&gt;              新增其他上游仓库</span><br><span class=\"line\">3 git remote remove &lt;git url &gt;          移除与远程仓库的管理</span><br><span class=\"line\">4 git remote set-url origin &lt;git url&gt;   修改推送源</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h2><h3 id=\"git-checkout-—切换分⽀\"><a href=\"#git-checkout-—切换分⽀\" class=\"headerlink\" title=\"git checkout —切换分⽀\"></a>git checkout —切换分⽀</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 git checkout branch1        切换到已有的本地分⽀branch1</span><br><span class=\"line\">2 git checkout origin/branch1 切换到远程分⽀branch1</span><br><span class=\"line\">3 git checkout -b branch2 基于当前本地分⽀创建⼀个新的分⽀branch2</span><br><span class=\"line\">4 git checkout origin/branch1 -b branch2 基于远程分⽀branch1创建⼀个新的分⽀bra</span><br><span class=\"line\">5 git checkout                撤销⼯作区所有内容的修改。危险操作，谨慎</span><br><span class=\"line\">6 git checkout -- &lt;file&gt;      撤销⼯作区file内容的修改。危险操作，谨慎</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-branch-—管理分⽀\"><a href=\"#git-branch-—管理分⽀\" class=\"headerlink\" title=\"git branch —管理分⽀\"></a>git branch —管理分⽀</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 git branch -D &lt;分⽀名&gt;                    删除分⽀</span><br><span class=\"line\">2 git branch -M &lt;⽼分⽀名&gt; &lt;新分⽀名&gt;        重命名分⽀</span><br><span class=\"line\">3 git branch -m &lt;新分⽀名&gt;                  将当前分⽀重命名为新分⽀名</span><br><span class=\"line\">4 git branch --set-upstream-to=origin/xxx   将本地分⽀与远程分⽀关联</span><br><span class=\"line\">5 git branch --unset-upstream-to=origin/xxx 取消本地分⽀与远程分⽀的关联</span><br></pre></td></tr></table></figure>","text":"本地操作提交git add —–⼯作区提交到暂存区1231 git add . 将所有修改⽂件都提交到暂存区2 git add ./a.js ./b.js 将修...","permalink":"/post/git","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"git","slug":"git","count":1,"path":"api/categories/git.json"}],"tags":[{"name":"git","slug":"git","count":1,"path":"api/tags/git.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E5%9C%B0%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">本地操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%90%E4%BA%A4\"><span class=\"toc-text\">提交</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#git-add-%E2%80%94%E2%80%93%E2%BC%AF%E4%BD%9C%E5%8C%BA%E6%8F%90%E4%BA%A4%E5%88%B0%E6%9A%82%E5%AD%98%E5%8C%BA\"><span class=\"toc-text\">git add —–⼯作区提交到暂存区</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#git-commit-%E2%80%94%E2%80%93%E2%BC%AF%E4%BD%9C%E5%8C%BA%E5%86%85%E5%AE%B9%E6%8F%90%E4%BA%A4%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93\"><span class=\"toc-text\">git commit —–⼯作区内容提交到本地仓库</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#git-push-%E2%80%94%E2%80%93%E5%B0%86%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E7%9A%84%E5%86%85%E5%AE%B9%E6%8E%A8%E9%80%81%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93\"><span class=\"toc-text\">git push —–将本地仓库的内容推送到远程仓库</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B0%E5%BB%BA\"><span class=\"toc-text\">新建</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%88%E5%B9%B6\"><span class=\"toc-text\">合并</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#git-merge-%E2%80%94%E2%80%93%E5%B0%86%E5%85%B6%E4%BB%96%E5%88%86%E2%BD%80%E5%90%88%E5%B9%B6%E5%88%B0%E2%BD%AC%E5%89%8D%E6%89%80%E5%9C%A8%E5%88%86%E2%BD%80%E2%BE%A5%E8%BE%B9\"><span class=\"toc-text\">git merge —–将其他分⽀合并到⽬前所在分⽀⾥边</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#git-rebase-%E2%80%94%E2%80%93%E7%AE%80%E6%B4%81commit%E8%AE%B0%E5%BD%95%EF%BC%8C%E5%A4%9A%E6%AC%A1commit%E5%90%88%E5%B9%B6%E4%B8%BA%E2%BC%80%E6%AC%A1\"><span class=\"toc-text\">git rebase —–简洁commit记录，多次commit合并为⼀次</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#git-cherry-pick-%E2%80%94%E2%80%93%E5%90%88%E5%B9%B6%E6%8C%87%E5%AE%9A%E7%9A%84commit%E5%88%B0%E5%BD%93%E5%89%8D%E5%88%86%E2%BD%80\"><span class=\"toc-text\">git cherry-pick —–合并指定的commit到当前分⽀</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%9E%E6%92%A4\"><span class=\"toc-text\">回撤</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#git-revert-%E2%80%94%E2%80%93%E5%8F%96%E6%B6%88%E6%9F%90%E6%AC%A1commit%E7%9A%84%E5%86%85%E5%AE%B9%EF%BC%88%E5%8F%96%E6%B6%88%E6%9F%90%E6%AC%A1commit%E6%9B%B4%E6%94%B9%E7%9A%84%E5%86%85%E5%AE%B9%EF%BC%8C%E4%BD%86%E6%98%AF%E4%B8%8D%E4%BC%9A%E5%8F%96%E6%B6%88commit%E7%9A%84%E8%AE%B0%E5%BD%95%E2%BD%BD%E6%98%AF%E2%BD%A4%E6%96%B0%E2%BC%80%E6%AC%A1%E7%9A%84commit%E8%BF%9B%E2%BE%8F%E8%A6%86%E7%9B%96%EF%BC%89\"><span class=\"toc-text\">git revert —–取消某次commit的内容（取消某次commit更改的内容，但是不会取消commit的记录⽽是⽤新⼀次的commit进⾏覆盖）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#git-reset-%E2%80%94%E2%80%93%E5%9B%9E%E6%BB%9A%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">git reset —–回滚代码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#git-restore-%E2%80%94%E2%80%93%E6%92%A4%E9%94%80%E7%BC%93%E5%AD%98%EF%BC%88%E2%BD%A4%E4%BA%8E%E5%B0%86%E6%94%B9%E5%8A%A8%E4%BB%8E%E6%9A%82%E5%AD%98%E5%8C%BA%E9%80%80%E5%9B%9E%E2%BC%AF%E4%BD%9C%E5%8C%BA%EF%BC%89\"><span class=\"toc-text\">git restore —–撤销缓存（⽤于将改动从暂存区退回⼯作区）</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">缓存</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#git-stash-%E2%80%94%E2%80%93%E7%BC%93%E5%AD%98%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">git stash —–缓存代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B\"><span class=\"toc-text\">查看</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#git-diff-%E2%80%94%E2%80%93%E5%AF%B9%E2%BD%90%E5%B7%AE%E5%BC%82\"><span class=\"toc-text\">git diff —–对⽐差异</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#git-log\"><span class=\"toc-text\">git log</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#git-status-%E2%80%94%E2%80%94-%E6%9F%A5%E7%9C%8B%E2%BC%AF%E4%BD%9C%E5%8C%BA%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">git status —— 查看⼯作区状态</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">全局配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E2%BD%A4%E2%BC%BE%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">配置⽤⼾信息</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%9C%E7%A8%8B\"><span class=\"toc-text\">远程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8B%89%E5%8F%96\"><span class=\"toc-text\">拉取</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#git-fetch-%E2%80%94%E8%8E%B7%E5%8F%96%E6%9B%B4%E6%96%B0\"><span class=\"toc-text\">git fetch —获取更新</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#git-clone-%E2%80%94%E5%85%8B%E9%9A%86%E4%BB%93%E5%BA%93\"><span class=\"toc-text\">git clone —克隆仓库</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#git-pull-%E2%80%94%E6%8B%89%E5%8F%96%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%B9%B6%E5%90%88%E5%B9%B6\"><span class=\"toc-text\">git pull —拉取远程仓库并合并</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E8%81%94\"><span class=\"toc-text\">关联</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#git-remote\"><span class=\"toc-text\">git remote</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">分支管理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#git-checkout-%E2%80%94%E5%88%87%E6%8D%A2%E5%88%86%E2%BD%80\"><span class=\"toc-text\">git checkout —切换分⽀</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#git-branch-%E2%80%94%E7%AE%A1%E7%90%86%E5%88%86%E2%BD%80\"><span class=\"toc-text\">git branch —管理分⽀</span></a></li></ol></li></ol>","author":{"name":"Carlos Lee","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"npm 包开发流程","uid":"642d5527a23c1a254ea2226d6952428e","slug":"npm-package","date":"2023-12-01T10:03:07.000Z","updated":"2023-12-20T10:09:10.426Z","comments":true,"path":"api/articles/npm-package.json","keywords":null,"cover":null,"text":"Eslint、stylelint配置包开发编写对应依赖配置的npm包，之后发版到公司私有仓库下，由其他项目下载引入使用。公司统一npm包配置流程： 设置npm镜...","permalink":"/post/npm-package","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"前端技术","slug":"前端技术","count":3,"path":"api/categories/前端技术.json"}],"tags":[{"name":"npm","slug":"npm","count":1,"path":"api/tags/npm.json"},{"name":"eslint","slug":"eslint","count":1,"path":"api/tags/eslint.json"},{"name":"stylelint","slug":"stylelint","count":1,"path":"api/tags/stylelint.json"}],"author":{"name":"Carlos Lee","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{}}